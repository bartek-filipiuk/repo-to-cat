"""Add authentication: password_hash, email, sessions table, user_id FK

Revision ID: 1052d2e36053
Revises: b8ab312fc9b8
Create Date: 2025-10-14 06:09:13.657834

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1052d2e36053'
down_revision: Union[str, None] = 'b8ab312fc9b8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Create sessions table
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    op.create_index('ix_sessions_token', 'sessions', ['token'], unique=False)
    op.create_index('ix_sessions_user_id', 'sessions', ['user_id'], unique=False)

    # Add user_id FK to generations (nullable for anonymous generations)
    op.add_column('generations', sa.Column('user_id', sa.UUID(), nullable=True))
    op.create_index('ix_generations_user_id', 'generations', ['user_id'], unique=False)
    op.create_foreign_key(None, 'generations', 'users', ['user_id'], ['id'])

    # Add email column (nullable)
    op.add_column('users', sa.Column('email', sa.String(length=255), nullable=True))

    # FIXED: Add password_hash as nullable first, with server default for existing rows
    op.add_column('users', sa.Column('password_hash', sa.String(length=255),
                                     nullable=True,
                                     server_default='NEEDS_PASSWORD_RESET'))

    # Backfill: Update any existing users with NULL password_hash to have the default
    # (In production, you would manually set proper passwords before making it NOT NULL)
    op.execute("""
        UPDATE users
        SET password_hash = 'NEEDS_PASSWORD_RESET'
        WHERE password_hash IS NULL
    """)

    # Now make password_hash NOT NULL (safe because all rows have a value)
    op.alter_column('users', 'password_hash',
               existing_type=sa.String(length=255),
               nullable=False,
               server_default=None)  # Remove server default after backfill

    # Make username NOT NULL
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)

    # Add unique constraint on email
    op.create_unique_constraint(None, 'users', ['email'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Drop sessions table
    op.drop_index('ix_sessions_user_id', table_name='sessions')
    op.drop_index('ix_sessions_token', table_name='sessions')
    op.drop_table('sessions')

    # Drop user_id from generations (with named constraint)
    op.drop_constraint('generations_user_id_fkey', 'generations', type_='foreignkey')
    op.drop_index('ix_generations_user_id', table_name='generations')
    op.drop_column('generations', 'user_id')

    # Drop email unique constraint (with named constraint)
    op.drop_constraint('users_email_key', 'users', type_='unique')

    # Revert username to nullable
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)

    # Drop password_hash and email columns
    op.drop_column('users', 'password_hash')
    op.drop_column('users', 'email')
    # ### end Alembic commands ###
